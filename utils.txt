npm init -y                 #create package.json
yarn add -D typescript      #add dependency for ts & yarn.lock file
npx tsc --init              #create a tsconfig file
yarn build                  #to transpile into js file the ts file with src code
node src/index.js           #to execute js file with node
yarn add -D ts-node         #to avoid repetition of point 4&5 every single time ( )

***add a script into package.json "start":"ts-node src/index.ts"

yarn start                  #starts the index.ts file
yarn add -D ts-node-dev     #same as nodemon -> modify the "start" script with ts-node-dev --respawn
yarn add nodemon            #previous may not work properly on WIN so use nodemon (moved up into devDependencies)

**if you use nodemon, use yarn dev instead of yarn start (because of the changes made into package.json)

yarn add express            #javascript library
yarn add -D @types/express  #add type definition
yarn add -D @types/node     #gives us access to type definitions for nodejs packages (*)

(*) because of node.js is written in javascript, we need to add third-party packages called types to deal with typescript
do it almost everytime you install package 
but, if we don't have the types for a javascript library do the following(*)

create new folder called @types and add file inside called with the same name of the module -> shortid used in this example
yarn add shortid
create the file shortid.d.ts
do the import into index.ts -> the type will be "any"

do the necessary imports
(*)in case you have red squiggles restart typescript server from vscode palette(*)

create the server as per node.js docs
DO THE CODE!



b? = b could be optional
b! = b is not going to be undefined or you are telling ts "just leave me alone"

interface is an object with values inside

type .. {} is everything else
so use interface to create objects and type to create anithing else

type func = () => void; is a function that takes no parameters and returns void

//AWS start from here
0 - import aws-sdk
1 - download docker cli & docker image for dynamoDB local
2 - run docker container
https://www.youtube.com/watch?v=ZHMHQmCLakA
3 - from docker cli, run aws configure to set fake credentials
4 - to connect with dynamoDB local instance, run from aws cli: aws dynamodb list-tables --endpoint-url http://localhost:port where container is running
5 - create a table:

aws dynamodb create-table --table-name Music --attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S --key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5

6 - 9:04 create table doesn't work - issue with credentials